// calculator_test.js
import { assertEquals } from "https://deno.land/std@0.224.0/testing/asserts.ts";

// Simula una evaluaci칩n b치sica similar al hook useCalculator
function evaluate(input) {
  try {
    // Reemplazar s칤mbolo de porcentaje con su valor decimal
    const sanitized = input.replace(/%/g, "*0.01");

    // Evitar m칰ltiples puntos decimales consecutivos
    if (/\d*\.\d*\./.test(sanitized)) return "ERROR";

    const result = eval(sanitized);

    // Validaciones del resultado
    if (
      typeof result !== "number" ||
      isNaN(result) ||
      result < 0 ||
      result > 999999999 ||
      result.toString().length > 9
    ) {
      return "ERROR";
    }

    return result.toString();
  } catch {
    return "ERROR";
  }
}

// 游빍 Test Cases
Deno.test("suma b치sica sin errores", () => {
  assertEquals(evaluate("2+2"), "4");
});

Deno.test("multiplicaci칩n normal", () => {
  assertEquals(evaluate("5*3"), "15");
});

Deno.test("divisi칩n precisa", () => {
  assertEquals(evaluate("10/2"), "5");
});

Deno.test("resta b치sica", () => {
  assertEquals(evaluate("7-4"), "3");
});

Deno.test("suma con decimales", () => {
  assertEquals(evaluate("1.5+2.5"), "4");
});

Deno.test("n칰mero negativo y suma", () => {
  assertEquals(evaluate("-5+10"), "5");
});

Deno.test("porcentaje como decimal", () => {
  assertEquals(evaluate("50%"), "0.5");
});

Deno.test("multiplicaci칩n que supera el l칤mite", () => {
  assertEquals(evaluate("999999999*2"), "ERROR");
});

Deno.test("divisi칩n con resultado largo", () => {
  const res = evaluate("22/7");
  assertEquals(res.length <= 9, true);
});

Deno.test("entrada con m칰ltiples puntos decimales", () => {
  assertEquals(evaluate("1.2.3"), "ERROR");
});
